<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Profiling Report</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.plot.ly/plotly-2.27.0.min.js"></script>
    <style>
      .sortable {
        cursor: pointer;
        position: relative;
        padding-right: 20px;
      }
      .sortable::after {
        content: "⇅";
        position: absolute;
        right: 5px;
        opacity: 0.5;
        font-size: 0.8em;
      }
      .sortable.asc::after {
        content: "↑";
        opacity: 1;
      }
      .sortable.desc::after {
        content: "↓";
        opacity: 1;
      }
      .table th {
        white-space: nowrap;
      }
    </style>
  </head>
  <body class="bg-light">
    <div class="container my-4">
      <h1 class="mb-4">Profiling Report</h1>

      <!-- Metadata section -->
      {% if metadata %}
      <div class="card mb-4">
        <div class="card-header">Script Information</div>
        <div class="card-body">
          <ul class="list-group list-group-flush">
            {% for key, val in metadata.items() %}
            <li class="list-group-item"><strong>{{ key }}:</strong> {{ val }}</li>
            {% endfor %}
          </ul>
        </div>
      </div>
      {% endif %}

      <!-- KPI cards -->
      <div class="row text-center mb-4">
        {% for metric in kpis %}
        <div class="col-md-3 col-sm-6 mb-3">
          <div class="card shadow-sm h-100">
            <div class="card-body">
              <h6 class="card-subtitle text-muted">{{ metric.label }}</h6>
              <h3 class="card-title">{{ metric.value }}</h3>
            </div>
          </div>
        </div>
        {% endfor %}
      </div>

      <!-- Charts -->
      <div class="mb-5">
        {% if has_time %}
        <div id="duration-chart" class="mb-5"></div>
        {% endif %}
        {% if has_memory %}
        <div id="memory-chart" class="{% if has_time %}mt-5{% endif %} mb-5"></div>
        {% endif %}
        {% if has_gpu %}
        <div id="gpu-utilization-chart" class="{% if has_memory or has_time %}mt-5{% endif %} mb-5"></div>
        <div id="gpu-memory-chart" class="mt-5"></div>
        {% endif %}
      </div>

      <!-- Data table -->
      <div class="card">
        <div class="card-header">Detailed Data</div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th class="sortable" onclick="sortTable(0, 'string')">Step</th>
                  {% if has_time %}<th class="sortable" onclick="sortTable(1, 'number')">Duration (s)</th>{% endif %}
                  {% if has_memory %}<th class="sortable" onclick="sortTable({{ 2 if has_time else 1 }}, 'number')">RAM Usage (MB)</th>{% endif %}
                  {% if has_gpu %}
                    <th class="sortable" onclick="sortTable({{ 3 if has_time and has_memory else 2 if has_time or has_memory else 1 }}, 'number')">GPU Util (%)</th>
                    <th class="sortable" onclick="sortTable({{ 4 if has_time and has_memory else 3 if has_time or has_memory else 1 }}, 'number')">GPU Mem Used (MB)</th>
                    <th class="sortable" onclick="sortTable({{ 5 if has_time and has_memory else 4 if has_time or has_memory else 1 }}, 'number')">GPU Δ (MB)</th>
                    <th class="sortable" onclick="sortTable({{ 6 if has_time and has_memory else 5 if has_time or has_memory else 1 }}, 'number')">GPU Temp (°C)</th>
                  {% endif %}
                </tr>
              </thead>
              <tbody>
                {% for row in rows %}
                <tr>
                  <td>{{ row.step }}</td>
                  {% if has_time %}<td>{{ "%.3f"|format(row.duration) if row.duration is not none else 'N/A' }}</td>{% endif %}
                  {% if has_memory %}<td>{{ "%.2f"|format(row.memory_mb) if row.memory_mb is not none else 'N/A' }}</td>{% endif %}
                  {% if has_gpu %}
                    <td>{{ "%.1f"|format(row.gpu_utilization) if 'gpu_utilization' in row and row.gpu_utilization is not none else 'N/A' }}</td>
                    <td>{{ "%.1f"|format(row.gpu_memory_used_mb) if 'gpu_memory_used_mb' in row and row.gpu_memory_used_mb is not none else 'N/A' }}</td>
                    <td>{{ "%+.1f"|format(row.gpu_memory_delta_mb) if 'gpu_memory_delta_mb' in row and row.gpu_memory_delta_mb is not none else 'N/A' }}</td>
                    <td>{{ row.gpu_temperature_gpu if 'gpu_temperature_gpu' in row and row.gpu_temperature_gpu is not none else 'N/A' }}</td>
                  {% endif %}
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <script>
      {% if has_time %}
      const durationData = {{ duration_plot_json | safe }};
      Plotly.newPlot('duration-chart', durationData.data, durationData.layout);
      {% endif %}
      
      {% if has_memory %}
      const memoryData = {{ memory_plot_json | safe }};
      Plotly.newPlot('memory-chart', memoryData.data, memoryData.layout);
      {% endif %}
      
      {% if has_gpu %}
        {% if gpu_util_plot_json != 'null' %}
        try {
            const gpuUtilData = {{ gpu_util_plot_json | safe }};
            Plotly.newPlot('gpu-utilization-chart', gpuUtilData.data, gpuUtilData.layout);
        } catch (e) {
            console.error("Error rendering GPU utilization chart:", e);
        }
        {% endif %}
        
        {% if gpu_memory_plot_json != 'null' %}
        try {
            const gpuMemoryData = {{ gpu_memory_plot_json | safe }};
            Plotly.newPlot('gpu-memory-chart', gpuMemoryData.data, gpuMemoryData.layout);
        } catch (e) {
            console.error("Error rendering GPU memory chart:", e);
        }
        {% endif %}
      {% endif %}
    </script>
    
    <script>
      // Store the current sort state for each column
      const sortStates = {};
      
      function sortTable(columnIndex, type) {
        const table = document.querySelector('.table');
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        
        // Toggle sort direction or set to ascending by default
        const currentSort = sortStates[columnIndex];
        const sortDirection = currentSort === 'asc' ? 'desc' : 'asc';
        
        // Reset all sort indicators
        document.querySelectorAll('.sortable').forEach(th => {
          th.classList.remove('asc', 'desc');
        });
        
        // Set the sort indicator for the clicked column
        const header = table.querySelectorAll('th')[columnIndex];
        header.classList.add(sortDirection);
        
        // Update sort state
        sortStates[columnIndex] = sortDirection;
        
        // Sort the rows
        rows.sort((a, b) => {
          let aValue = a.cells[columnIndex].textContent.trim();
          let bValue = b.cells[columnIndex].textContent.trim();
          
          // Handle 'N/A' values by treating them as null
          if (aValue === 'N/A') aValue = null;
          if (bValue === 'N/A') bValue = null;
          
          // Handle different data types
          if (type === 'number') {
            aValue = aValue ? parseFloat(aValue.replace(/[^0-9.-]+/g, '')) : null;
            bValue = bValue ? parseFloat(bValue.replace(/[^0-9.-]+/g, '')) : null;
          }
          
          // Handle null values
          if (aValue === null && bValue === null) return 0;
          if (aValue === null) return sortDirection === 'asc' ? -1 : 1;
          if (bValue === null) return sortDirection === 'asc' ? 1 : -1;
          
          // Compare values
          if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
          if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
          return 0;
        });
        
        // Rebuild the table
        rows.forEach(row => tbody.appendChild(row));
      }
      
      // Add tooltips to sortable headers
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.sortable').forEach(th => {
          th.title = 'Click to sort';
        });
      });
    </script>
  </body>
</html>
